<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>LocalDate、LocalDateTime、LocalTime相关类使用指南</title>
      <link href="2021/07/31/localdate/"/>
      <url>2021/07/31/localdate/</url>
      
        <content type="html"><![CDATA[<h1 id="LocalDate、LocalDateTime、LocalTime相关类使用指南"><a href="#LocalDate、LocalDateTime、LocalTime相关类使用指南" class="headerlink" title="LocalDate、LocalDateTime、LocalTime相关类使用指南"></a>LocalDate、LocalDateTime、LocalTime相关类使用指南</h1><blockquote><p>由于JDK1.8之前的时间相关处理类设计的不合理及不易用，jdk的大佬们在吸收了jodaTime 等优秀的时间框架设计理念,在Java8中提出了关于时间新的使用姿势。使用Java8新的时间特性会让你像从eclipse换到IntellJ IDEA那样丝滑顺畅。</p></blockquote><h2 id="一、起源（为替代Date、Calendar而生）"><a href="#一、起源（为替代Date、Calendar而生）" class="headerlink" title="一、起源（为替代Date、Calendar而生）"></a>一、起源（为替代Date、Calendar而生）</h2><p>从 Java 1.0 开始，就提供了对日期与时间处理的 <code>java.util.Date</code> 类，它允许把日期解释为年、月、日、小时、分钟和秒值，也允许格式化和解析日期字符串。不过，这些函数的 API 不易于实现国际化。在升级版本到 Java 1.1 前，Java 维护者认为 Date 类很难被重新构造，由于这个原因，Java 1.1 增加了一个新的 <code>java.util.Calendar</code> 类。<code>Calendar</code> 类实现日期和时间字段之间转换，使用 <code>DateFormat</code> 类来格式化和解析日期字符串。可是在开发者使用过程中感受到，<code>Calendar</code> 类并不比 <code>Date</code> 类好用，它们面临的部分问题是：</p><ul><li>可变性：像时间和日期这样的类应该是不可变的。</li><li>偏移性：Date 中的年份是从 1900 开始的，而月份是从 0 开始的，不太符合常识习惯。</li><li>类命名：Date 并不表示处理”日期”，而<code>Calendar</code>类也不全是表示”日历”，类命名比较不合理。</li><li>格式化：时间日期格式化只对 <code>Date</code> 有用，<code>Calendar</code> 则不行，且时间格式化对象存在线程安全问题。</li></ul><p>自 2001 年起 Joda-Time 项目发布，它提供了简单易用且线程安全的时间类库，很快在 Java 社区中流行并广泛使用。Java 维护人员考虑到 JDK 中也需要一个这样的库，于是就与巴西的 Michael Nascimento Santos 合作，Java 官方 JDK 新增了的时间/日期 API的进程（JSR-310）。</p><p>直观性方面举个例子:</p><pre class=" language-java"><code class="language-java">  Date date <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token number">121</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//输出: Wed Aug 18 00:00:00 CST 2021</span></code></pre><p>很难辨认这个构造方法</p><h2 id="二、奥德赛（使用指南）"><a href="#二、奥德赛（使用指南）" class="headerlink" title="二、奥德赛（使用指南）"></a>二、奥德赛（使用指南）</h2><h3 id="2-1-新的时间API组成"><a href="#2-1-新的时间API组成" class="headerlink" title="2.1 新的时间API组成"></a>2.1 新的时间API组成</h3><p>新增的时间 API 由 5 个包组成，如下：</p><ul><li><strong><a href="http://docs.oracle.com/javase/8/docs/api/java/time/package-summary.html">java.time</a>：</strong> 包含值对象的基础包</li><li><strong><a href="http://docs.oracle.com/javase/8/docs/api/java/time/zone/package-summary.html">java.time.zone</a>：</strong> 包含时区支持的类</li><li><strong><a href="http://docs.oracle.com/javase/8/docs/api/java/time/chrono/package-summary.html">java.time.chrono</a>：</strong> 提供对不同的日历系统的访问</li><li><strong><a href="http://docs.oracle.com/javase/8/docs/api/java/time/format/package-summary.html">java.time.format</a>：</strong> 格式化和解析时间和日期</li><li><strong><a href="http://docs.oracle.com/javase/8/docs/api/java/time/temporal/package-summary.html">java.time.temporal</a>：</strong> 包括底层框架和扩展特性</li></ul><h3 id="2-2-一些时间概念"><a href="#2-2-一些时间概念" class="headerlink" title="2.2 一些时间概念"></a>2.2 一些时间概念</h3><h4 id="2-2-1-时间与时刻"><a href="#2-2-1-时间与时刻" class="headerlink" title="2.2.1 时间与时刻"></a>2.2.1 时间与时刻</h4><ul><li><p><strong>时间：</strong> 可以表示准确的时刻或日期，也可以表示一个时间段。</p></li><li><p><strong>时刻：</strong> 指某一瞬bai间，表示具体的某一时间点，只是时间中的一个点。</p></li></ul><h4 id="2-2-2-时间戳和时区"><a href="#2-2-2-时间戳和时区" class="headerlink" title="2.2.2 时间戳和时区"></a>2.2.2 时间戳和时区</h4><ul><li><strong>时间戳：</strong> 时间戳是指格林尼治时间1970年01月01日00时00分00秒到现在的总秒数（毫秒数），可以理解成绝对时间，它与时区无关，不同时区对同一时间戳的解读不一样</li><li><strong>时区：</strong> 同一时刻（时间戳），世界上各地区的时间可能是不一样的，具体时间与时区相关，按经度一共分为24个时区，英国格林尼治是0时区，中国北京是东8区</li></ul><h4 id="2-2-3-时间输出格式类型"><a href="#2-2-3-时间输出格式类型" class="headerlink" title="2.2.3 时间输出格式类型"></a>2.2.3 时间输出格式类型</h4><table><thead><tr><th align="left">输出类型</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">2019-06-10T03:48:20.847Z</td><td align="left">世界标准时间，T：日期和时间分隔，Z：世界标准时间</td></tr><tr><td align="left">2019-06-10T11:51:48.872</td><td align="left">不含时区信息的时间</td></tr><tr><td align="left">2019-06-10T11:55:04.421+08:00[Asia/Shanghai]</td><td align="left">包含时区信息的时间，+08:00 表示相对于0时区加 8 小时，[Asia/Shanghai]：时区</td></tr></tbody></table><h3 id="2-3-LocalDate、LocalDateTime、Instant、Duration以及Period"><a href="#2-3-LocalDate、LocalDateTime、Instant、Duration以及Period" class="headerlink" title="2.3 LocalDate、LocalDateTime、Instant、Duration以及Period"></a>2.3 LocalDate、LocalDateTime、Instant、Duration以及Period</h3><h4 id="2-3-1使用LocalDate和LocalTime"><a href="#2-3-1使用LocalDate和LocalTime" class="headerlink" title="2.3.1使用LocalDate和LocalTime"></a>2.3.1使用LocalDate和LocalTime</h4><p>使用新日期和时间API我们时，最先碰到的可能事<code>LocalDate</code>类。该类实例是一个不可变对象，它只提供简单的日期，并不含当天的时间信息。另外它也不含当天的时间信息。另外，它也不附带任何与时区相关的信息。</p><p>通过静态工厂方法<code>of</code>创建一个<code>LocalDate</code>实例。LocalDate实例提供了多种方法来读取常用的值，比如年、月、日 星期几等如下所示：</p><pre class=" language-java"><code class="language-java">LocalDate date <span class="token operator">=</span> LocalDate<span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token number">2021</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">25</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//2021-07-25</span><span class="token keyword">int</span> year <span class="token operator">=</span> date<span class="token punctuation">.</span><span class="token function">getYear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//2021</span>Month month <span class="token operator">=</span> date<span class="token punctuation">.</span><span class="token function">getMonth</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//JULY</span><span class="token keyword">int</span> dayOfMonth <span class="token operator">=</span> date<span class="token punctuation">.</span><span class="token function">getDayOfMonth</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//25</span><span class="token keyword">int</span> i <span class="token operator">=</span> date<span class="token punctuation">.</span><span class="token function">lengthOfMonth</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//31</span><span class="token keyword">boolean</span> leapYear <span class="token operator">=</span> date<span class="token punctuation">.</span><span class="token function">isLeapYear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//false</span></code></pre><p>还可以使用工厂方法从系统时钟获取当前日期：</p><pre class=" language-java"><code class="language-java">LocalDate now <span class="token operator">=</span> LocalDate<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>本文剩余部分讨论的时日期-时间类都提供了类似相应的工厂方法。你还可以通过传递一个<code>TemporalField</code> 参数给<code>get</code>方法拿到同样的信息。<code>TemporalField</code> 是一个接口，他定义了如何访问<code>Temporal</code>对象某个字段的值。<code>ChronField</code>枚举实现了这一接口，所以你可以很方便的使用get方法得到枚举元素的值，如下所示。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">int</span> year <span class="token operator">=</span> date<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>ChronoField<span class="token punctuation">.</span>YEAR<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> month <span class="token operator">=</span> date<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>ChronoField<span class="token punctuation">.</span>MONTH_OF_YEAR<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> day <span class="token operator">=</span> date<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>ChronoField<span class="token punctuation">.</span>DAY_OF_MONTH<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>类似地，一天中的时间，比如17:30:20，可以使用<code>LocalTime</code>类来表示，它有两个重载的工厂方法，一个是接受小时和分钟，第二个同时还接受秒，同<code>LocalDate</code>一样，<code>LocalTime</code>类也提供了一些<code>getter</code>方法来访问这些变量的值，如下所示：</p><pre class=" language-java"><code class="language-java">LocalTime time <span class="token operator">=</span> LocalTime<span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token number">17</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//17:30:20</span><span class="token keyword">int</span> hour <span class="token operator">=</span> time<span class="token punctuation">.</span><span class="token function">getHour</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//17</span><span class="token keyword">int</span> minute <span class="token operator">=</span> time<span class="token punctuation">.</span><span class="token function">getMinute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//30</span><span class="token keyword">int</span> second <span class="token operator">=</span> time<span class="token punctuation">.</span><span class="token function">getSecond</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//20</span></code></pre><p><code>LocalDate</code> 和<code>LocalDateTime</code> 都可以通过解析代表他们的字符串创建，使用静态方法<code>parse</code>，你可以实现这一目的：</p><pre class=" language-java"><code class="language-java">LocalDate date <span class="token operator">=</span> LocalDate<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token string">"2021-07-27"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>LocalTime time <span class="token operator">=</span> LocalTime<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token string">"17:30:20"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>你可以向<code>parse</code>方法传递一个<code>DateTimeFormatter</code>。该类实例定义了如何格式化一个日期或者时间对象。正如上文所说，它是为了替换老版本的<code>java.util.DateFormat</code>推荐替代品。我们会在下文详细介绍。同时，如果那你传入了一个无法解析的字符串，将会抛出继承自<code>RuntimeException</code>的<code>DateTimeParseException</code>异常。</p><h4 id="2-3-2-合并日期和时间"><a href="#2-3-2-合并日期和时间" class="headerlink" title="2.3.2 合并日期和时间"></a>2.3.2 合并日期和时间</h4><p><code>LocalDateTime</code>是<code>LocalDate</code>和<code>LocalTime</code>的复合体。它同时表示了日期和时间。但是不带有时区信息，你可以直接创建，也可以通过合并日期和时间对象构造。如下所示：</p><pre class=" language-java"><code class="language-java">LocalDate date <span class="token operator">=</span> LocalDate<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token string">"2021-07-27"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>LocalTime time <span class="token operator">=</span> LocalTime<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token string">"17:30:20"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>LocalDateTime dt1 <span class="token operator">=</span> LocalDateTime<span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span>date<span class="token punctuation">,</span> time<span class="token punctuation">)</span><span class="token punctuation">;</span>LocalDateTime dt2 <span class="token operator">=</span> LocalDateTime<span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token number">2021</span><span class="token punctuation">,</span> Month<span class="token punctuation">.</span>JULY<span class="token punctuation">,</span> <span class="token number">25</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>LocalDateTime dt3 <span class="token operator">=</span> date<span class="token punctuation">.</span><span class="token function">atTime</span><span class="token punctuation">(</span><span class="token number">18</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>LocalDateTime dt4 <span class="token operator">=</span> date<span class="token punctuation">.</span><span class="token function">atTime</span><span class="token punctuation">(</span>time<span class="token punctuation">)</span><span class="token punctuation">;</span>LocalDateTime dt5 <span class="token operator">=</span> time<span class="token punctuation">.</span><span class="token function">atDate</span><span class="token punctuation">(</span>date<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>它们通过各自的<code>atTime</code>或<code>atDate</code>方法，向<code>LocalDate</code>传递一个<code>LocalTime</code>，或者向<code>LocalTime</code>传递一个<code>LocalDate</code>。同样的你可以使用<code>toLocalDate</code>或者同<code>LocalTime</code>方法，从<code>LocalDateTime</code>中提取<code>LocalDate</code>或者<code>LocalTime</code>对象：</p><pre class=" language-java"><code class="language-java"> LocalDate date1 <span class="token operator">=</span> dt1<span class="token punctuation">.</span><span class="token function">toLocalDate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> LocalTime time1 <span class="token operator">=</span> dt1<span class="token punctuation">.</span><span class="token function">toLocalTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h4 id="2-3-4-机器的日期和时间格式（Instance类的使用）"><a href="#2-3-4-机器的日期和时间格式（Instance类的使用）" class="headerlink" title="2.3.4 机器的日期和时间格式（Instance类的使用）"></a>2.3.4 机器的日期和时间格式（Instance类的使用）</h4><p>作为人，我们习惯于以星期几、几号、几点、几分这样的方式理解日期和时间。但是这种方式对于计算机而言并不容易理解。从计算机角度来看，建模时间最自然的格式是表示一个持续时间段上某个点的单一最大整型。这也是新的<code>java.time.Instant</code>类对时间的建模方式，基本上它是已Unix元年时间（传统设定为UTC时区1970年1月1日）开始所有的秒数进行计算。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">long</span> currentTimeMillis <span class="token operator">=</span> instant<span class="token punctuation">.</span><span class="token function">getEpochSecond</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>你可以通过向静态工厂方法<code>ofEpochSecond</code>传递一个代表描述的值来创建一个该类的实例。静态工厂方法还有一个增强版本，它接受第二个以纳秒为单位的参数值，对传入作为秒数的参数进行调整。重载的版本会对纳秒进行调整确保它是在0~999 999 999之间如下：</p><pre class=" language-java"><code class="language-java">Instant<span class="token punctuation">.</span><span class="token function">ofEpochSecond</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Instant<span class="token punctuation">.</span><span class="token function">ofEpochSecond</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Instant<span class="token punctuation">.</span><span class="token function">ofEpochSecond</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span>1_000_000_000<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//2秒+10亿纳秒（1秒）</span>Instant<span class="token punctuation">.</span><span class="token function">ofEpochSecond</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token operator">-</span>1_000_000_000<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//4秒-10亿纳秒（1秒）</span></code></pre><p>正如上文<code>LocalDate</code>类一样<code>Instant</code>类也支持静态工厂方法<code>now</code>，他能帮你获取当前时间戳。在此，再次强调一遍，<code>Instant</code>类的设计初衷是为了便于机器使用。它包含的是由秒及纳秒所构成的数字。所以，它无法处理那些人所理解的时间单位。如下：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">int</span> day <span class="token operator">=</span> Instant<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>ChronoField<span class="token punctuation">.</span>DAY_OF_MONTH<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>它会抛出这样的异常：</p><pre class=" language-java"><code class="language-java">java<span class="token punctuation">.</span>time<span class="token punctuation">.</span>temporal<span class="token punctuation">.</span>UnsupportedTemporalTypeException<span class="token operator">:</span> Unsupported field<span class="token operator">:</span> DayOfMonth</code></pre><p>但是你可以使用<code>Duration</code>和<code>Period</code>类使用<code>Instant</code>，接下来我们会对这部分内容进行介绍。</p><h4 id="2-3-5-定义Duration和Period"><a href="#2-3-5-定义Duration和Period" class="headerlink" title="2.3.5 定义Duration和Period"></a>2.3.5 定义Duration和Period</h4><p>到目前为止，你看到的所有类，，<code>Temporal</code>接口定义了如何读取和操纵为时间建模的对象值。之前的介绍中，我们已经了解了创建Temporal实例的几种方法。很自然的你会想到，我们需要创建两个Temporal时间对象之间的间隔。<code>Duration</code>类的静态工厂方法<code>between</code>就是为了这个目的而设计的。你可以创建两个<code>LocalTime</code>，两个<code>LocalDate</code>，或者两个<code>Instant</code>对象之间的duration，如下所示：</p><pre class=" language-java"><code class="language-java">Duration d1 <span class="token operator">=</span> Duration<span class="token punctuation">.</span><span class="token function">between</span><span class="token punctuation">(</span>time1<span class="token punctuation">,</span> time2<span class="token punctuation">)</span><span class="token punctuation">;</span>Duration d2 <span class="token operator">=</span> Duration<span class="token punctuation">.</span><span class="token function">between</span><span class="token punctuation">(</span>dateTime1<span class="token punctuation">,</span> dateTime2<span class="token punctuation">)</span><span class="token punctuation">;</span>Duration d3 <span class="token operator">=</span> Duration<span class="token punctuation">.</span><span class="token function">between</span><span class="token punctuation">(</span>instant1<span class="token punctuation">,</span> instant2<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>由于<code>LocalDateTime</code>和<code>Instant</code>是为不同目的而设计的，一个是为了人阅读使用，另外一个是便于机器处理，所以二者不能混用。如果你试图，在这两个类对象直接创建duration，会触发一个<code>DateTimeException</code>异常。此外，由于duration类主要用于衡量秒和纳秒时间的长短，你不能向<code>between</code>方法传递<code>LocalDate</code>对象做为参数。也就是说不能传日期进去。</p><p>如果你需要以年、月、日的方式对多个时间单位建模，可以使用<code>Period</code>类。使用该类的工厂方法<code>between</code>，你可以使用得到两个<code>LocalDate</code>之间的时长，如下所示：</p><pre class=" language-java"><code class="language-java">Period between <span class="token operator">=</span> Period<span class="token punctuation">.</span><span class="token function">between</span><span class="token punctuation">(</span>LocalDate<span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token number">2021</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                                 LocalDate<span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token number">2021</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>最后，<code>Duration</code>和<code>Period</code>类都提供了很多非常方便的工厂类，直接创建对应的实例；换句话说，可以不只以来两个时间差来创建定义他们如下：</p><pre class=" language-java"><code class="language-java">Duration threeMinutes <span class="token operator">=</span> Duration<span class="token punctuation">.</span><span class="token function">ofMinutes</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Duration threeMinutes <span class="token operator">=</span> Duration<span class="token punctuation">.</span><span class="token function">ofMinutes</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> ChronoUnit<span class="token punctuation">.</span>MINUTES<span class="token punctuation">)</span><span class="token punctuation">;</span>Period tenDays <span class="token operator">=</span> Period<span class="token punctuation">.</span><span class="token function">ofDays</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Period threeWeeks <span class="token operator">=</span> Period<span class="token punctuation">.</span><span class="token function">ofWeeks</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Period twoYearsSixMonthsOneDay <span class="token operator">=</span> Period<span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p><code>Duration</code>类和<code>Period</code>类<strong>共享了很多相似的方法</strong>，参见下表</p><table><thead><tr><th>方法名</th><th align="center">是否是静态方法</th><th>方法描述</th></tr></thead><tbody><tr><td>between</td><td align="center">是</td><td>创建两个时间点之间的时间间隔</td></tr><tr><td>from</td><td align="center">是</td><td>由一个临时时间节点创建的时间间隔</td></tr><tr><td>of</td><td align="center">是</td><td>由它的组成部分创建时间间隔实例</td></tr><tr><td>parse</td><td align="center">是</td><td>由字符串创建时间间隔实例</td></tr><tr><td>addTo</td><td align="center">否</td><td>创建该时间间隔的副本，并加到某个指定的时间间隔对象</td></tr><tr><td>get</td><td align="center">否</td><td>读取该时间间隔的状态</td></tr><tr><td>isNegative</td><td align="center">否</td><td>检查该时间间隔是否为负值，不包含零</td></tr><tr><td>isZero</td><td align="center">否</td><td>检查该时间间隔的时长是否为零</td></tr><tr><td>minus</td><td align="center">否</td><td>通过减去一定的时间创建该时间间隔的副本</td></tr><tr><td>multipliedBy</td><td align="center">否</td><td>将该时间间隔乘某个值创建出新的时间间隔</td></tr><tr><td>negated</td><td align="center">否</td><td>以忽略某个时长的方式创建该时间间隔副本</td></tr><tr><td>plus</td><td align="center">否</td><td>将该时间间隔增加某个时长来创建时间间隔副本</td></tr><tr><td>subtractFrom</td><td align="center">否</td><td>从指定的对象减去该时间间隔</td></tr></tbody></table><p>截至目前为，介绍的这些日期-时间都是不可修改的，这是为了更好的支持函数式编程，<strong>确保了线程安全</strong>，保持领域模式的一致性而做出的重大设计决定。当然，新的日期和时间API也提供了一些便利的方法来创建这些对象的可变版本。比如你可能向在已有的<code>LocalDate</code>对象上增加3天。在接下来还将继续介绍对时间格式化的一些操作。</p><h3 id="2-4-操纵、解析和格式化日期"><a href="#2-4-操纵、解析和格式化日期" class="headerlink" title="2.4 操纵、解析和格式化日期"></a>2.4 操纵、解析和格式化日期</h3><p>如果你已经有一个<code>LocalDate</code>对象，想要创建它的一个修改版，最直接也最简单的方法是是用<code>withAttribute</code>方法。<code>withAttribute</code>方法会创建一个对象，并按照需要赋值他的属性。注意，下面这段代码的所有方法都返回了一个新的对象。它们都不会修改原来的对象！</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//以比较直观的方式操纵LocalDate的属性</span>LocalDate date1 <span class="token operator">=</span> LocalDate<span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token number">2021</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">25</span><span class="token punctuation">)</span><span class="token punctuation">;</span>LocalDate date2 <span class="token operator">=</span> date1<span class="token punctuation">.</span><span class="token function">withYear</span><span class="token punctuation">(</span><span class="token number">2022</span><span class="token punctuation">)</span><span class="token punctuation">;</span>LocalDate date3 <span class="token operator">=</span> date2<span class="token punctuation">.</span><span class="token function">withDayOfMonth</span><span class="token punctuation">(</span><span class="token number">25</span><span class="token punctuation">)</span><span class="token punctuation">;</span>LocalDate date4 <span class="token operator">=</span> date3<span class="token punctuation">.</span><span class="token function">with</span><span class="token punctuation">(</span>ChronoField<span class="token punctuation">.</span>MONTH_OF_YEAR<span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p><code>with</code>方法和<code>get</code>方法类似都声明于**<code>Temporal</code><strong>接口，</strong>所有的日期和时间类API都实现了这两个方法**，他们定义了单点的时间，比如<code>LocalDate</code>、<code>LocalTime</code>、<code>LocalDateTime</code>以及<code>Instant</code>。更确切地说，使用<code>get</code>和<code>with</code>方法能将<code>Temporal</code>进行读写分离，它也可以声明式的操纵<code>LocalDate</code>对象，比如，可以像下面这段代码那样加上或者减去一段时间：</p><pre class=" language-java"><code class="language-java">LocalDate date1 <span class="token operator">=</span> LocalDate<span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token number">2021</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">25</span><span class="token punctuation">)</span><span class="token punctuation">;</span>LocalDate date2 <span class="token operator">=</span> date1<span class="token punctuation">.</span><span class="token function">plusWeeks</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>LocalDate date3 <span class="token operator">=</span> date2<span class="token punctuation">.</span><span class="token function">minusYears</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>LocalDate date4 <span class="token operator">=</span> date3<span class="token punctuation">.</span><span class="token function">plus</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">,</span> ChronoUnit<span class="token punctuation">.</span>MONTHS<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>与刚才介绍的get和with方法类似，**<code>plus</code>方法也是通用方法**，它和<code>minus</code>方法都声明于<code>Temporal</code>接口中，通过这些方法，对<code>TemporalUnit</code>对象加上或者减去一个数字，我们就能非常方面的将<code>Temporal</code>对象前进或者回滚到某个时间段，通过<code>ChronUnit</code>枚举我们可以非常方便的实现Temporal接口。</p><p><strong><code>LocalDate</code><strong>、</strong><code>LocalTime</code><strong>、</strong><code>LocalDateTime</code><strong>以及</strong><code>Instant</code>类提供了大量的通用方法</strong>，下表进行了总结。</p><table><thead><tr><th>方法名</th><th align="center">是否是静态方法</th><th>方法描述</th></tr></thead><tbody><tr><td>from</td><td align="center">是</td><td>根据传入的Temporal对象创建新的对象</td></tr><tr><td>now</td><td align="center">是</td><td>根据系统时钟来创建当前时间的对象</td></tr><tr><td>of</td><td align="center">是</td><td>由Temporal对象的某个部分创建该对象的实例</td></tr><tr><td>parse</td><td align="center">是</td><td>由字符串创建时间对象</td></tr><tr><td>atOffset</td><td align="center">否</td><td>创建Temporal对象和某个时区偏移相结合</td></tr><tr><td>atZone</td><td align="center">否</td><td>将Temporal对象和某个时区相结合</td></tr><tr><td>format</td><td align="center">否</td><td>使用某个指定的格式将Temporal对象转换为字符串（Instant类不提供该方法）</td></tr><tr><td>get</td><td align="center">否</td><td>读取Temporal对象的一部分的值</td></tr><tr><td>minus</td><td align="center">否</td><td>通过将当前Temporal对象减去一段时间返回新创建一个对象</td></tr><tr><td>plus</td><td align="center">否</td><td>通过将当前Temporal对象加上一段时间返回新创建一个对象</td></tr><tr><td>with</td><td align="center">否</td><td>以当前时间对象为准，改变某些状态来创建一个新的时间对象</td></tr></tbody></table><h4 id="2-4-1-使用TemporalAdjuster"><a href="#2-4-1-使用TemporalAdjuster" class="headerlink" title="2.4.1 使用TemporalAdjuster"></a>2.4.1 使用TemporalAdjuster</h4><p>截至目前，你所看到的所有日期操作相对比较直接的。有的时候，你需要进行一些更加复杂的操作，比如将日期调整到下个周日，下个工作日，或者本月的最后一天。这时你可以使用重载版本的with方法，向其传递一个提供了更多定制化选择的<code>TemporalAdjuster</code>对象，更加灵活地处理日期。对于最常见的用例，日期和时间API已经提供了大量预定义的<code>TemporalAdjuster</code>。你可以通过静态工厂访问他们，如下所示：</p><pre class=" language-java"><code class="language-java">LocalDate date1 <span class="token operator">=</span> LocalDate<span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token number">2021</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">25</span><span class="token punctuation">)</span><span class="token punctuation">;</span>LocalDate date2 <span class="token operator">=</span> date1<span class="token punctuation">.</span><span class="token function">with</span><span class="token punctuation">(</span>TemporalAdjusters<span class="token punctuation">.</span><span class="token function">nextOrSame</span><span class="token punctuation">(</span>DayOfWeek<span class="token punctuation">.</span>SUNDAY<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>LocalDate date3 <span class="token operator">=</span> date2<span class="token punctuation">.</span><span class="token function">with</span><span class="token punctuation">(</span>TemporalAdjusters<span class="token punctuation">.</span><span class="token function">lastDayOfMonth</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>下表提供了<code>TemporalAdjusters</code>中包含的工厂方法列表。</p><table><thead><tr><th>方法名</th><th align="left">描述</th></tr></thead><tbody><tr><td>dayOfWeekInMonth</td><td align="left">创建一个新的日期，它的值为同一个月中每一周的第几天</td></tr><tr><td>firstDayOfMonth</td><td align="left">创建一个新的日期，它的值为当月的第一天</td></tr><tr><td>firstDayOfNextMonth</td><td align="left">创建一个新的日期，它的值为下月的第一天</td></tr><tr><td>firstDayOfNextYear</td><td align="left">创建一个新的日期，它的值为明年的第一天</td></tr><tr><td>firstDayOfYear</td><td align="left">创建一个新的日期，它的值为当年的第一天</td></tr><tr><td>firstInMonth</td><td align="left">创建一个新的日期，它的值为同一个月中，第一个符合星期几要求的值</td></tr><tr><td>lastDayOfMonth</td><td align="left">创建一个新的日期，它的值为当月的最后一天</td></tr><tr><td>lastDayOfYear</td><td align="left">创建一个新的日期，它的值为今年的最后一天</td></tr><tr><td>lastInMonth</td><td align="left">创建一个新的日期，它的值为同一个月中，最后一个符合星期几要求的值</td></tr><tr><td>next/previous</td><td align="left">创建一个新的日期，并将其设定为日期调整后或调整前，第一个符合指定星期几要求的日期</td></tr><tr><td>nextOrSame/previousOrSame</td><td align="left">创建一个新的日期，并将其值设定为日期调整后或调整前，第一个符合指定星期几要求的日期，如果该日期已经符合要求，直接返回对象</td></tr></tbody></table><p>正如上面所列出的方法，使用<code>TemporalAdjuster</code>我们可以进行更加复杂的日期操作，而且这些方法的名称也非常直观，方法名基本就是问题陈述。此外，即使你没有找到符合你要求的预定义的<code>TemporalAdjuster</code>，创建你自己的<code>TemporalAdjuster</code>也并非难事。<code>TemporalAdjusters</code>接口只声明了单一的一个方法（这使得它成为了一个函数式接口），定义入下：</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@FunctionalInterface</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">TemporalAdjuster</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    Temporal <span class="token function">adjustInto</span><span class="token punctuation">(</span>Temporal temporal<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p>这意味着<code>TemporalAdjuster</code>接口的实现需要定义如何将一个<code>Temporal</code>对象转换为另一个<code>Temporal</code>对象。你可以把它看成一个<code>UnaryOperator&lt;Temporal&gt;</code>。比如我们想实现设计一个NextWorkingDay的的方法，能计算下个工作日的日期，并且过滤掉周六周日。如果当天介于周一至周五，日期向后移动一天，如果当天是周六或周日则返回下周一代码如下：</p><pre class=" language-java"><code class="language-java">TemporalAdjuster nextWorkingDay <span class="token operator">=</span> TemporalAdjusters<span class="token punctuation">.</span><span class="token function">ofDateAdjuster</span><span class="token punctuation">(</span>temporal <span class="token operator">-</span><span class="token operator">></span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    DayOfWeek dow <span class="token operator">=</span> DayOfWeek<span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span>temporal<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>ChronoField<span class="token punctuation">.</span>DAY_OF_WEEK<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> dayToAdd <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>dow <span class="token operator">==</span> DayOfWeek<span class="token punctuation">.</span>FRIDAY<span class="token punctuation">)</span> dayToAdd <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>dow <span class="token operator">==</span> DayOfWeek<span class="token punctuation">.</span>SATURDAY<span class="token punctuation">)</span> dayToAdd <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> temporal<span class="token punctuation">.</span><span class="token function">plus</span><span class="token punctuation">(</span>dayToAdd<span class="token punctuation">,</span> ChronoUnit<span class="token punctuation">.</span>DAYS<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>接下来，我们继续讨论关于日期的序列化和反序列化，根据新的日期和时间API来满足自己的业务要求。</p><h4 id="2-4-2-格式化和解析日期-时间对象"><a href="#2-4-2-格式化和解析日期-时间对象" class="headerlink" title="2.4.2 格式化和解析日期-时间对象"></a>2.4.2 格式化和解析日期-时间对象</h4><p>处理日期和时间对象时，格式化和解析日期-时间对象是另外一个非常重要的功能，新的<code>java.time.format</code>包就是特别为这个目的而设计的。这个包中最重要的类是<code>DateTimeFormatter</code>。创建格式器最简单的房价是同规它的静态工厂方法及常量。像<code>BASIC_ISO_DATE</code>和<code>ISO_LOCAL_DATE</code>这样的常量都是<code>DateTimeFormatter</code>预定义实例。所有的<code>DateTimeFormatter</code>实例都能用于以一定的格式创建代表特定日期或时间的字符串。比如下面我们使用了两个不同格式器序列化生成了字符串：</p><pre class=" language-java"><code class="language-java"> LocalDate date1 <span class="token operator">=</span> LocalDate<span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token number">2021</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">25</span><span class="token punctuation">)</span><span class="token punctuation">;</span> String s1 <span class="token operator">=</span> date1<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span>DateTimeFormatter<span class="token punctuation">.</span>BASIC_ISO_DATE<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//20210725</span> String s2 <span class="token operator">=</span> date1<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span>DateTimeFormatter<span class="token punctuation">.</span>ISO_LOCAL_DATE<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//2021-07-25</span></code></pre><p>你也可以通过解析代表日期或之间的字符串重新创建该日期对象。所有的日期和时间API都提供了表示时间点或者时间段的工厂方法，你可以使用工厂方法<code>parse</code>达到重创该日期对象的目的：</p><pre class=" language-java"><code class="language-java"> LocalDate date1 <span class="token operator">=</span> LocalDate<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token string">"20210725"</span><span class="token punctuation">,</span> DateTimeFormatter<span class="token punctuation">.</span>BASIC_ISO_DATE<span class="token punctuation">)</span><span class="token punctuation">;</span> LocalDate date2 <span class="token operator">=</span> LocalDate<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token string">"2021-07-25"</span><span class="token punctuation">,</span> DateTimeFormatter<span class="token punctuation">.</span>ISO_LOCAL_DATE<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>和老的<code>java.util.DateFormat</code>相比较，所有的<code>DateTimeFormatter</code><strong>实例都是线程安全的</strong>。所以，你能够以单例模式创建格式器实例，就像<code>DateTimeFormatter</code>所定义的那些常量，并能在<em><strong>多个线程间共享这些实例</strong></em>，<code>DateTimeFormatter</code>还支持一个静态的工厂方法，它可以按照某个特定的模式创建格式器，代码如下</p><pre class=" language-java"><code class="language-java">DateTimeFormatter formatter <span class="token operator">=</span> DateTimeFormatter<span class="token punctuation">.</span><span class="token function">ofPattern</span><span class="token punctuation">(</span><span class="token string">"yyyy-MM-dd"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>LocalDate date1 <span class="token operator">=</span> LocalDate<span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token number">2021</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">25</span><span class="token punctuation">)</span><span class="token punctuation">;</span>String formatDate <span class="token operator">=</span> date1<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span>formatter<span class="token punctuation">)</span><span class="token punctuation">;</span>LocalDate date2 <span class="token operator">=</span> LocalDate<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>formatDate<span class="token punctuation">,</span> formatter<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p><code>parse</code>方法用来解析字符串反序列化生成<code>LocalDate</code>对象，<code>format</code>用来序列化对象，<code>ofPattern</code>方法也提供了一个重载的版本，使用它你可以创建某个Locale的格式器，如下:</p><pre class=" language-java"><code class="language-java">DateTimeFormatter italianFormatter <span class="token operator">=</span> DateTimeFormatter<span class="token punctuation">.</span><span class="token function">ofPattern</span><span class="token punctuation">(</span><span class="token string">"d.MMMM yyyy"</span><span class="token punctuation">,</span> Locale<span class="token punctuation">.</span>ITALIAN<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//25.luglio 2021</span>        DateTimeFormatter chFormatter <span class="token operator">=</span> DateTimeFormatter<span class="token punctuation">.</span><span class="token function">ofPattern</span><span class="token punctuation">(</span><span class="token string">"yyyy MMMM dd "</span><span class="token punctuation">,</span> Locale<span class="token punctuation">.</span>CHINA<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//2021 七月 25</span>LocalDate date1 <span class="token operator">=</span> LocalDate<span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token number">2021</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">25</span><span class="token punctuation">)</span><span class="token punctuation">;</span>String format <span class="token operator">=</span> date1<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span>chFormatter<span class="token punctuation">)</span><span class="token punctuation">;</span>LocalDate date2 <span class="token operator">=</span> LocalDate<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>format<span class="token punctuation">,</span> italianFormatter<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>最后，如果你还需要更细粒度的控制，<code>DateTimeFormatterBuilder</code>类还提供了更加复杂的格式器，你可以选择恰当的方法，一步一步构造自己的格式器，另外它还提供了非常强大的解析功能，比如区分大小写的解析、柔性解析（允许解析器使用启发式的机制去解析输入，不精确的匹配指定的模式）、填充，以及在格式器中指定可选接。通过<code>DateTimeFormatterBuilder</code>我们可以是实现自己的需求的解释器。如下：</p><pre class=" language-java"><code class="language-java">LocalDate date1 <span class="token operator">=</span> LocalDate<span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token number">2021</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">25</span><span class="token punctuation">)</span><span class="token punctuation">;</span>DateTimeFormatter twFormatter <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DateTimeFormatterBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">appendText</span><span class="token punctuation">(</span>ChronoField<span class="token punctuation">.</span>YEAR<span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">appendLiteral</span><span class="token punctuation">(</span><span class="token string">" "</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">appendText</span><span class="token punctuation">(</span>ChronoField<span class="token punctuation">.</span>MONTH_OF_YEAR<span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">appendLiteral</span><span class="token punctuation">(</span><span class="token string">" "</span><span class="token punctuation">)</span>                               <span class="token punctuation">.</span><span class="token function">appendText</span><span class="token punctuation">(</span>ChronoField<span class="token punctuation">.</span>DAY_OF_MONTH<span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">parseCaseInsensitive</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">toFormatter</span><span class="token punctuation">(</span>Locale<span class="token punctuation">.</span>TRADITIONAL_CHINESE<span class="token punctuation">)</span><span class="token punctuation">;</span>    String format1 <span class="token operator">=</span> date1<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span>twFormatter<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//2021 七月 25</span></code></pre><p>目前为止，你已经学习了如何创建、操纵、格式化以及解析时间点和时间段，但是你还不了解如何处理日期和时间之间的微妙关系。比如你可能需要处理不同时区，或者由于不同历法系统带来的差异，接下来我们再探究如果使用新的日期和时间API解决这些问题。</p><h3 id="2-5-处理不同的时区和历法"><a href="#2-5-处理不同的时区和历法" class="headerlink" title="2.5 处理不同的时区和历法"></a>2.5 处理不同的时区和历法</h3><p>之前你看到的日期和时间都不包含时区信息。时区的处理时新版日期和时间API新增加的重要功能，使用新版日期和时间API时区的处理被极大的简化了。新的<code>java.time.ZoneId</code>类时老版本<code>java.util.TimeZone</code>的替代平，它的设计目标就是让你无需为时区处理的复杂和繁琐操心。跟其他的日期和时间类一样，<code>ZoneId</code>类也是无法被修改的。</p><p>在<code>ZoneRules</code>这个类中包含了40个这样的实例。你可以简单的通过调用<code>ZoneId</code>的<code>getRules</code>方法得到指定时区的规则。每隔特定的<code>ZoneId</code>对象都有一个地区ID表示，比如：</p><pre class=" language-java"><code class="language-java">ZoneId shanghai <span class="token operator">=</span> ZoneId<span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token string">"Asia/Shanghai"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>地区ID都为“{区域}/{城市}”的格式，这些地区集合的设定都有intnet编号分配机构（IANA）的时区数据库提供。你可以通过Java8的新方法<code>toZoneId</code> 将一个老时区对象转换为ZoneId：</p><pre class=" language-java"><code class="language-java">ZoneId zoneId <span class="token operator">=</span> TimeZone<span class="token punctuation">.</span><span class="token function">getDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toZoneId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>一旦得到这个<code>ZoneId</code>对象，你就可以将它与<code>LocalDate</code>、<code>LocalDateTime</code>或者<code>Instant</code>对象整合起来，构造一个为一个<code>ZoneDateTime</code>对象，他代表了相对于指定时区的时间点，代码如下：</p><pre class=" language-java"><code class="language-java">ZoneId shanghai <span class="token operator">=</span> ZoneId<span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token string">"Asia/Shanghai"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>LocalDate date <span class="token operator">=</span> LocalDate<span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token number">2021</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">25</span><span class="token punctuation">)</span><span class="token punctuation">;</span>ZonedDateTime zdt1 <span class="token operator">=</span> date<span class="token punctuation">.</span><span class="token function">atStartOfDay</span><span class="token punctuation">(</span>shanghai<span class="token punctuation">)</span><span class="token punctuation">;</span>LocalDateTime zdt2 <span class="token operator">=</span> LocalDateTime<span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token number">2021</span><span class="token punctuation">,</span> Month<span class="token punctuation">.</span>JULY<span class="token punctuation">,</span> <span class="token number">25</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">,</span> <span class="token number">13</span><span class="token punctuation">,</span> <span class="token number">45</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Instant instant <span class="token operator">=</span> Instant<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>ZonedDateTime zdt3 <span class="token operator">=</span> instant<span class="token punctuation">.</span><span class="token function">atZone</span><span class="token punctuation">(</span>shanghai<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>下图对<code>ZoneDateTime</code>组成部分进行了说明：</p><p><img src="https://cdn.jsdelivr.net/gh/cchenjc/image/20210731140414.png" alt="LocalDateTime相关类关系"></p><p>通过<code>ZoneID</code>,你还可以将<code>LocalDateTime</code>转换为Instant</p><pre class=" language-java"><code class="language-java">LocalDateTime localDateTime <span class="token operator">=</span> LocalDateTime<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Instant instant <span class="token operator">=</span> localDateTime<span class="token punctuation">.</span><span class="token function">toInstant</span><span class="token punctuation">(</span>ZoneOffset<span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token string">"+08:00"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>还可以通过反向方式获得<code>Instant</code></p><pre class=" language-java"><code class="language-java">LocalDateTime localDateTime1 <span class="token operator">=</span> LocalDateTime<span class="token punctuation">.</span><span class="token function">ofInstant</span><span class="token punctuation">(</span>instant<span class="token punctuation">,</span> ZoneId<span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token string">"Asia/Shanghai"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h4 id="2-5-1-利用和UTC-格林尼治时间的固定偏差计算时区"><a href="#2-5-1-利用和UTC-格林尼治时间的固定偏差计算时区" class="headerlink" title="2.5.1 利用和UTC/格林尼治时间的固定偏差计算时区"></a>2.5.1 利用和UTC/格林尼治时间的固定偏差计算时区</h4><p>另一种表达时区的方式时利用当前时区和UTC/格林尼治的固定偏差。比如，基于这个理论，表示上海时间为东八区你可以使用<code>ZoneOffset</code>类，它时一个<code>ZoneId</code>的一个子类，表示当前时间和格林尼治时间的差异：</p><pre class=" language-java"><code class="language-java"> ZoneOffset shanghaiOffset <span class="token operator">=</span> ZoneOffset<span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token string">"+08:00"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>新版的日期和时间API孩提供了另一个高级特性，即对非ISO历法系统的支持。</p><h4 id="2-5-2-使用别的日历系统图"><a href="#2-5-2-使用别的日历系统图" class="headerlink" title="2.5.2 使用别的日历系统图"></a>2.5.2 使用别的日历系统图</h4><p>ISO-8601日历系统时世界标准日历系统，但是java8中还另外提供了4种其他的日历胸痛，这些日历系统中每一个都有一个对应的日历类，分别是<code>ThaiBuddhistDate</code>、<code>HijrahDate</code>、<code>JapaneseDate</code>、<code>MinguoDate</code>。所有这些类以及<code>LocalDate</code>都实现了<code>ChronoLocalDate</code>接口，能够对公历进行建模。利用<code>LocalDate</code>对象，你可以创建这些类的实例如下：</p><pre class=" language-java"><code class="language-java">LocalDateTime now <span class="token operator">=</span> LocalDateTime<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>MinguoDate minguoDate <span class="token operator">=</span> MinguoDate<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span>now<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//Minguo ROC 110-07-28</span></code></pre><p>或者，你还可以显示的为某个<code>Locale</code>传教日历系统，接着创建该<code>Locale</code>对应的日期的实例。新的日期和时间API中，<code>Chronology</code>接口建模了一个日历系统，使用它的静态工厂方法<code>ofLocale</code>，可以得到它的一个实例，如下：</p><pre class=" language-java"><code class="language-java">Chronology chronology <span class="token operator">=</span> Chronology<span class="token punctuation">.</span><span class="token function">ofLocale</span><span class="token punctuation">(</span>Locale<span class="token punctuation">.</span>CHINESE<span class="token punctuation">)</span><span class="token punctuation">;</span>ChronoLocalDate chronoLocalDate <span class="token operator">=</span> chronology<span class="token punctuation">.</span><span class="token function">dateNow</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>日期及时间API得设计者建议我们使用<code>LocalDate</code>，尽量避免使用<code>ChronoLocalDate</code>，原因时开发者会在代码中做一些假设，比如一个月不会超过31天，一年12个月，或者月份数量时固定得，出于这些原因都应该尽量使用<code>LocalDate</code>，包括存储、操作、业务规则解读等，不过当你需要输入或输出本地化时，你应该使用<code>ChronoLocalDate</code>类。</p><h3 id="2-6-小结"><a href="#2-6-小结" class="headerlink" title="2.6 小结"></a>2.6 小结</h3><ul><li>Java8之前老版的<code>java.util.Date</code>类以及其他用于建模日期时间类有很多不一致及设计上的缺陷，包括易变性以及糟糕的偏移性、默认值和命名。</li><li>新版的日期和时间API中，日期和时间对象是不可变的（如：String）</li><li>新的API提供了两种不同的时间表示方式，有效地区分了运行时任何机器的不同需求。</li><li>你可以使用绝对或者相对的方式操纵日期和时间，操作的结果总是返回一个新的对象，老的对象不会发生变化</li><li><code>TemporalAdjuster</code>让你能够用更精细的方式操纵日期，不再局限于一次只能改变它的一个值，并且你还可以按照需求定义自己的日期转换器。</li><li>你现在可以按照特定的格式需求，定义自己的格式器，打印输出或者解析日期-时间对象。这些格式器可以通过模板创建，也可以自己编程创建，并且它们都是线程安全。</li><li>你可以用相对于某个地区/位置的方式，或者以与UTC/格林尼治时间的绝对偏差的方式表示时区，并将其应用到日期-时间的对象上，对其本地化。</li><li>你可以使用不同于ISO-8601标准的系统的其他日历系统了。</li><li>下面为相关类转换关系</li></ul><p><img src="https://cdn.jsdelivr.net/gh/cchenjc/image/20210802085406.png" alt="LocalDateTime相关类转换图"></p><h2 id="三、英灵殿（踩坑记）"><a href="#三、英灵殿（踩坑记）" class="headerlink" title="三、英灵殿（踩坑记）"></a>三、英灵殿（踩坑记）</h2><h3 id="3-1-SpringMVC中时间类型的转换和序列化问题"><a href="#3-1-SpringMVC中时间类型的转换和序列化问题" class="headerlink" title="3.1 SpringMVC中时间类型的转换和序列化问题"></a>3.1 SpringMVC中时间类型的转换和序列化问题</h3><h3 id="3-2-FastJson配置全局LocalDateTime序列化"><a href="#3-2-FastJson配置全局LocalDateTime序列化" class="headerlink" title="3.2 FastJson配置全局LocalDateTime序列化"></a>3.2 FastJson配置全局LocalDateTime序列化</h3>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> API </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>IntelliJ IDEA 2021.1 新功能</title>
      <link href="2021/04/09/idea-1/"/>
      <url>2021/04/09/idea-1/</url>
      
        <content type="html"><![CDATA[<h1 id="IntelliJ-IDEA-2021-1-新功能"><a href="#IntelliJ-IDEA-2021-1-新功能" class="headerlink" title="IntelliJ IDEA 2021.1 新功能"></a>IntelliJ IDEA 2021.1 新功能</h1>]]></content>
      
      
      <categories>
          
          <category> 生产力工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> IntelliJ IDEA </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ThreadPoolExecutor源码解析</title>
      <link href="2021/04/07/threadpool/"/>
      <url>2021/04/07/threadpool/</url>
      
        <content type="html"><![CDATA[<h1 id="ThreadPoolExecutor源码解析"><a href="#ThreadPoolExecutor源码解析" class="headerlink" title="ThreadPoolExecutor源码解析"></a>ThreadPoolExecutor源码解析</h1>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 源码 </tag>
            
            <tag> JUC </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>synchronized源码解析</title>
      <link href="2021/03/22/synchronized/"/>
      <url>2021/03/22/synchronized/</url>
      
        <content type="html"><![CDATA[<h1 id="synchronized源码解析"><a href="#synchronized源码解析" class="headerlink" title="synchronized源码解析"></a>synchronized源码解析</h1>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 源码 </tag>
            
            <tag> JUC </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ConcurrentHashMap源码解析</title>
      <link href="2021/03/10/concurrenthashmap/"/>
      <url>2021/03/10/concurrenthashmap/</url>
      
        <content type="html"><![CDATA[<h1 id="ConcurrentHashMap源码解析"><a href="#ConcurrentHashMap源码解析" class="headerlink" title="ConcurrentHashMap源码解析"></a>ConcurrentHashMap源码解析</h1>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 源码 </tag>
            
            <tag> JUC </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="2021/03/07/hello-world/"/>
      <url>2021/03/07/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class=" language-bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class=" language-bash"><code class="language-bash">$ hexo server</code></pre><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class=" language-bash"><code class="language-bash">$ hexo generate</code></pre><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class=" language-bash"><code class="language-bash">$ hexo deploy</code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      <categories>
          
          <category> 示例文章 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Typora </tag>
            
            <tag> Markdown </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
